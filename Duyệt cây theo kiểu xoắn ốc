#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cmath>
#include<map>
#include<climits>
#include<cstring>
#include<set>
#include<stack>
#include<queue>

using namespace std;
#define FOR(i,r,n) for(int i = r; i <= n; ++i)
#define run() int t; cin >>t; while(t--)
#define ll long long
#define pb push_back
const ll mod = 1000000007;
const ll INF = 1000002804;

struct node {
	int data;
	node* left;
	node* right;
};

typedef node* Tree;

node* makeNode(int x) {
	node* newNode = new node();
	newNode->data = x;
	newNode->right = NULL;
	newNode->left = NULL;
	return newNode;
}

void addNode(Tree& root, int u, int v, char c) {
	if (root == NULL) {
		node* newNode = makeNode(u);
		root = newNode;
		if (c == 'L') root->left = makeNode(v);
		else root->right = makeNode(v);
	}
	else {
		if (root->data == u) {
			if (c == 'L') root->left = makeNode(v);
			else root->right = makeNode(v);
		}
		else {
			if (root->left != NULL) addNode(root->left, u, v, c);
			if (root->right != NULL) addNode(root->right, u, v, c);
		}
	}
}

bool check;
int sz;
vector<int> degree[1001];

void ok(Tree& root, int cnt) {
	degree[cnt].pb(root->data);
	if (root->right == NULL && root->left == NULL) {
		sz = max(sz, cnt);
	}
	else {
		if (root->left != NULL) ok(root->left, cnt + 1);
		if (root->right != NULL) ok(root->right, cnt + 1);
	}
}

void solve() {
	int n; cin >> n;
	Tree mytree = NULL;
	check = true;
	FOR(i, 1, n) {
		int x, y;
		char c;
		cin >> x >> y >> c;
		addNode(mytree, x, y, c);
	}
	ok(mytree, 1);
	FOR(i, 1, sz) {
		if (i & 1) {
			reverse(degree[i].begin(), degree[i].end());
		}
		for (int x : degree[i]) cout << x << " ";
	}
	FOR(i, 1, sz) {
		degree[i].clear();
	}
}

int main() {
	run() {
		solve();
		cout << endl;
	}
}
