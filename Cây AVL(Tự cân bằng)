struct node {
	int data;
	node* right;
	node* left;
	int height;
};

typedef node* Tree;

node* makeNode(int x) {
	node* newNode = new node();
	newNode->left = NULL;
	newNode->right = NULL;
	newNode->data = x;
	newNode->height = 1;
	return newNode;
}

int getHeight(Tree root) {
	if (root == NULL) return 0;
	return root->height;
}

Tree rotateRight(Tree root) {
	Tree p = root->left;
	root->left = p->right;
	p->right = root;
	//set up height
	root->height = 1 + max(getHeight(root->left), getHeight(root->right));
	p->height = 1 + max(getHeight(p->left), getHeight(p->right));
	return p;
}

Tree rotateLeft(Tree root) {
	Tree p = root->right;
	root->right = p->left;
	p->left = root;
	//set up height
	root->height = 1 + max(getHeight(root->left), getHeight(root->right));
	p->height = 1 + max(getHeight(p->left), getHeight(p->right));
	return p;
}

Tree addNode(Tree root, int x) {
	
	if (root == NULL) {
		return makeNode(x);
	}
	if (x > root->data) root->right = addNode(root->right, x);
	else if (x < root->data) root->left = addNode(root->left, x);
	else return root;
	
	//set height
	root->height = 1 + max(getHeight(root->left), getHeight(root->right));
	
	//check for rotate
	//Hệ số cân bằng là chiều cao cây con trái trừ chiều cao cây con phải
	int valBalance = getHeight(root->left) - getHeight(root->right);
	//check 4 cases
	// 
	//Left-Left
	if (valBalance > 1 && x < root->left->data) return rotateRight(root);
	
	//Right-Right
	if (valBalance < -1 && x > root->right->data) return rotateLeft(root);
	
	//Left-Right
	if (valBalance > 1 && x > root->left->data) {
		root->left = rotateLeft(root->left);
		return rotateRight(root);
	}
	
	//Right-Left
	if (valBalance < -1 && x < root->right->data) {
		root->right = rotateRight(root->right);
		return rotateLeft(root);
	}
	return root;
}

void printTree(Tree root) {
	if (root != NULL) {
		cout << root->data << endl;
		printTree(root->left);
		printTree(root->right);
	}
}

 Node with minimum value
Node* nodeWithMimumValue(Node* node) {
    Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Delete a node
Node* deleteNode(Node* root, int key) {
    // Find the node and delete it
    if (root == NULL)
        return root;
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if ((root->left == NULL) ||
            (root->right == NULL)) {
            Node* temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            }
            else
                *root = *temp;
            free(temp);
        }
        else {
            Node* temp = nodeWithMimumValue(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right,
                temp->key);
        }
    }

    if (root == NULL)
        return root;

    // Update the balance factor of each node and
    // balance the tree
    root->height = 1 + max(height(root->left),
        height(root->right));
    int balanceFactor = getBalanceFactor(root);
    if (balanceFactor > 1) {
        if (getBalanceFactor(root->left) >= 0) {
            return rightRotate(root);
        }
        else {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
    }
    if (balanceFactor < -1) {
        if (getBalanceFactor(root->right) <= 0) {
            return leftRotate(root);
        }
        else {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }
    }
    return root;
}

void solve() {
	int n; cin >> n;
	Tree T = NULL;
	FOR(i, 1, n) {
		T = addNode(T, i);
	}
	printTree(T);
}

int main() {
	//run() {
		solve();
		//cout << endl;
	//}
}
